//Proyecto RNA y DL

double Prediccion = 0;
double Co = 0;
double CO = 0;
double CO_1[2];
double CO_2[5];
double y;
double salida = 0.5970932;
double entradas[2] ={0.333333, 1 };


//capa de entrada
double Pesos_In[2][5] = {{-0.08410312,  0.21708348,  0.4052253 ,  0.54859275, -1.414968  },
                        { 0.22679459,  0.05086604, -0.48881084, -0.7674166 ,  0.16005312}};
double Bias_In[5] = {0.05702061,  0.05998221,  0.01534097, -0.21763137,  0.11107995};
//capa #1
double Pesos_01[5][10] = {{ 0.02705733,  0.07228516,  0.4060867 ,  0.25045806,  0.10926957,
                          -0.22830756,  0.4657559 , -0.6441786 ,  0.2655596 , -0.13255891},
                          { 0.31661275,  0.24741131, -0.492398  , -0.2658379 ,  0.08736433,
                           0.26114935,  0.48840037, -0.22448507, -0.25237894, -0.30311906},
                          {-0.21746959, -0.54749596, -0.01604693,  0.3369033 ,  0.04851247,
                          0.14694853, -0.03745651,  0.5175865 ,  0.02652621,  0.6048794 },
                          { 0.06701718, -0.02613026,  0.59187025,  0.3547009 , -0.47288212,
                          0.10974712,  0.55039144, -0.2426671 , -0.2836867 , -0.17771366},
                          { 0.16415395,  0.60797954,  0.4365411 ,  0.81418246,  0.4748708 ,
                          0.9330182 ,  0.5280575 , -0.41467106, -0.5080692 ,  0.70354825}}; 
double Bias_01[10] = {0.08041722,  0.10630492, -0.10297661, -0.13005638,  0.10479493, -0.08093926, 
                      0.0741301 , -0.07327311,  0.08572982, -0.00436545};
//capa 02
double Pesos_02[10][1] = {{ 0.61400956},
                          { 0.7016208 },
                          {-0.35166788},
                          {-0.4961028 },
                          { 0.7076466 },
                          {-0.8346936 },
                          { 0.42300427},
                          { 0.04633067},
                          { 0.72825444},
                          {-0.5941992 }};
double Bias_02 = 0.08539937;


      
void setup()
{
    Serial.begin(9600); 
}

void loop()
{
  
// Primera capa oculta
  
  for (int j=0; j<=5; j++)
    {
      for (int i=0; i<=2; i++)
      {
          CO = ((entradas[i])*(Pesos_In[i][j]));
          Co = (CO + Co);                 //Acumulador X1*W1 + x2*w2 + ... + Xn*Wn
        }
          
        CO_1[j] = relu(Co + Bias_In[j]);        //Sumamos el Bias al acumulador y lo pasamos por la funcion de acti
        Co = 0;  
  }
         
 //------------------------Prueba de escritorio -------------------------------------
  int x=0;
  
  double neurona1capa1 = relu((entradas[0])*(Pesos_In[0][x]) + (entradas[1])*(Pesos_In[1][x]) + Bias_In[x]); 
    
  Serial.print("salida manual:  ");
    Serial.println(neurona1capa1);
    Serial.print("neurona del for:  ");
    Serial.println(CO_1[0]);
  
//------------------------------------------------------------------------------------
  
  
// segunda capa oculta
          
Co = 0;
CO = 0;
  
  for (int j=0; j<=10; j++)
    {
      for (int i=0; i<=5; i++)
      {
          CO = ((CO_1[i])*(Pesos_01[i][j]));
          Co = (CO + Co);
        }
          
        CO_2[j] = relu(Co + Bias_01[j]);  
      Co = 0;
  }


// salida
          
Co = 0;
CO = 0;
  

 for (int i=0; i<=10; i++)
  {
      CO = ((CO_2[i])*(Pesos_02[i][0]));
      Co = (CO + Co);
  }
       
  y = linear(Co + Bias_02);

//Se muestran los datos en pantalla
    MostrarEntradas();
  
    Serial.print("salida:   ");
    Serial.println(salida);
    
  
    Serial.print("Prediccion: ");
    Serial.println(y);
  
  
    Serial.println("---------------------");
}

//Funcion de activacion tanh

double relu(double x) {
   if (x <= 0) {
    x = 0;
    return x;
  } 
  
  double y = x;
  
  return y;

}
//Funcion de activacion lineal
double linear(double x)
{
  double y = x;
  
    return y;
}


void MostrarEntradas()
{
  Serial.print("Entradas: ");
  for (int i=0; i<=2; i++)
    { 
      Serial.print(entradas[i]);
      Serial.print(" ");
    }
  Serial.println(" ");
}
